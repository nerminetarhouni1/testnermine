pipeline {
    agent any
       environment {
        DOCKER_IMAGE = 'malekdocker98/spring:latest' 
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "192.168.33.10:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "mohamed_malek_turki"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexusCredential"
        ARTIFACT_VERSION = "${BUILD_NUMBER}"
     
    }
      options {
          buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
     
        stage('Scan') {
            steps {
               withSonarQubeEnv('sonarqube1') {
                    sh 'mvn clean compile sonar:sonar -Dsonar.java.binaries=target/classes '
                    
                }
            }
        }
          stage('Build Application') {
            steps {
                // Use Maven to build the Spring Boot application
                sh 'mvn clean package ' 
            }
        }

         stage('Test') {
            steps {
                // Run JUnit tests
                sh 'mvn test'
            }
            post {
                always {
                    // Archive test results
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

          stage("publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: ARTIFACT_VERSION,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging]
                            ]
                        );

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image from the Dockerfile in the repository
                    docker.build(DOCKER_IMAGE)
                }
            }
        }
      
          stage('push to dockerhub') {
            steps {
               script {
            withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    // Push the Docker image to Docker Hub
             sh """
                        echo \$DOCKERHUB_PASSWORD | docker login -u \$DOCKERHUB_USERNAME --password-stdin
                    """
                    
}

// sh "docker push ${DOCKER_IMAGE}"
 def containerIds = sh(script: 'docker ps -aq --filter "ancestor=malekdocker98/spring"', returnStdout: true).trim()

                // Check if container IDs are not empty before attempting to remove
                if (containerIds) {
                    sh "docker rm -f ${containerIds}"
                } else {
                    echo 'No containers to remove.'
                }

                // Remove the associated image
                sh 'docker rmi malekdocker98/spring'
sh"pwd"             

}

            }
        }
 stage('Docker Compose') {
            steps {
                script {
                   sh 'docker-compose up -d'
                }
            }
        }

      
    }
}
